"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


# Load environment variables from .env file
import json
import boto3
from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

ROOT_URLCONF = 'storefront.urls'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


def get_secret():
    secret_name = "prod/meowmart_secrets"
    region_name = "us-east-1"

    client = boto3.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except Exception as e:
        print(f"Error retrieving secret: {e}")
        raise e

    secret = get_secret_value_response['SecretString']
    return json.loads(secret)


secrets = get_secret()

RDS_DB_NAME = secrets.get('RDS_DB_NAME')
RDS_PASSWORD = secrets.get('RDS_PASSWORD')
RDS_USER = secrets.get('RDS_USER')
RDS_HOSTNAME = secrets.get('RDS_HOSTNAME')
RDS_PORT = secrets.get('RDS_PORT')
DOMAIN = secrets.get('DOMAIN')
GOOGLE_CLIENT_ID = secrets.get('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = secrets.get('GOOGLE_CLIENT_SECRET')
EMAIL_HOST = secrets.get('EMAIL_HOST')
EMAIL_HOST_USER = secrets.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = secrets.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = secrets.get('EMAIL_PORT')
EMAIL_USE_TLS = secrets.get('EMAIL_USE_TLS')
DEFAULT_FROM_EMAIL = secrets.get('DEFAULT_FROM_EMAIL')
SECRET_KEY = secrets.get('SECRET_KEY')
INSTAGRAM_APP_ID = secrets.get('INSTAGRAM_APP_ID')
INSTAGRAM_APP_SECRET = secrets.get('INSTAGRAM_APP_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = SECRET_KEY
ALLOWED_HOSTS = [DOMAIN, '127.0.0.1', 'localhost']


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': RDS_DB_NAME,
        'USER': RDS_USER,
        'PASSWORD': RDS_PASSWORD,
        'HOST': RDS_HOSTNAME,
        'PORT': RDS_PORT,
    }
}

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = EMAIL_HOST
EMAIL_HOST_USER = EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = EMAIL_HOST_PASSWORD
EMAIL_PORT = EMAIL_PORT
EMAIL_USE_TLS = EMAIL_USE_TLS


# The email address you want to use as the sender
DEFAULT_FROM_EMAIL = DEFAULT_FROM_EMAIL


ACCOUNT_EMAIL_PASSWORD_RESET_TEMPLATE = 'account/email/password_reset_key_message.txt'
ACCOUNT_EMAIL_PASSWORD_RESET_HTML_TEMPLATE = 'account/email/password_reset_key_message.html'


# Installed apps
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.instagram',
    'django_extensions',
    'django_prometheus',
    'django_filters',
    'corsheaders',
    'rest_framework',
    'drf_yasg',
    'djoser',
    'debug_toolbar',
    'pages',
    'store',
    'tags',
    'likes',
    'core',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'core.middleware.JWTAuthenticationMiddleware',
    'core.middleware.RefreshJWTTokenMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',

]


MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'


INTERNAL_IPS = [
    '127.0.0.1',
]

# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:9000',
#     'http://127.0.0.1:9000',
#     'https://kit.fontawesome.com/a076d05399.js',

# ]

CORS_ALLOW_ALL_ORIGINS = True


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.cart_id',
            ],
        },
    },
]

# WSGI_APPLICATION = 'storefront.wsgi.application'

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'mediafiles/store/images')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

AUTH_USER_MODEL = 'core.User'

DJOSER = {
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.UserSerializer',
    }
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1000)
}


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)


ACCOUNT_FORMS = {
    'signup': 'core.forms.CustomSignupForm',
}

SITE_ID = 1

# Automatically signup users when they login via a social provider
SOCIALACCOUNT_EMAIL_VERIFICATION = "none"
# LOGIN_REDIRECT_URL = '/profile/'
# LOGOUT_REDIRECT_URL = '/'
# SOCIALACCOUNT_LOGIN_ON_GET = False  # Ensure social account logs in immediately
SOCIALACCOUNT_AUTO_SIGNUP = True
ACCOUNT_EMAIL_REQUIRED = True

# Allauth settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_USERNAME_REQUIRED = True
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'openid'
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'REDIRECT_URI': 'https://shaqserver.com/accounts/google/login/callback/',

        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
            'key': ''
        }
    },
    # 'instagram': {
    #     'SCOPE': [
    #         'user_profile'
    #     ],
    #     'AUTH_PARAMS': {
    #         'access_type': 'online',
    #     },
    #     'APP': {
    #         'client_id': INSTAGRAM_APP_ID,
    #         'secret': INSTAGRAM_APP_SECRET,
    #         'key': ''
    #     }
    # }
}


# Ensure you have the correct path if you use a custom adapter
SOCIALACCOUNT_ADAPTER = 'core.adapters.MySocialAccountAdapter'
ACCOUNT_ADAPTER = 'core.adapters.MyAccountAdapter'


# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#         'allauth': {
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#         'core': {  # Replace 'core' with the name of your app where the adapters are located
#             'handlers': ['console'],
#             'level': 'DEBUG',
#         },
#     },
# }
